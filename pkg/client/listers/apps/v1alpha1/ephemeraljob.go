/*
Copyright 2021 The Kruise Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openkruise/kruise/apis/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EphemeralJobLister helps list EphemeralJobs.
// All objects returned here must be treated as read-only.
type EphemeralJobLister interface {
	// List lists all EphemeralJobs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EphemeralJob, err error)
	// EphemeralJobs returns an object that can list and get EphemeralJobs.
	EphemeralJobs(namespace string) EphemeralJobNamespaceLister
	EphemeralJobListerExpansion
}

// ephemeralJobLister implements the EphemeralJobLister interface.
type ephemeralJobLister struct {
	indexer cache.Indexer
}

// NewEphemeralJobLister returns a new EphemeralJobLister.
func NewEphemeralJobLister(indexer cache.Indexer) EphemeralJobLister {
	return &ephemeralJobLister{indexer: indexer}
}

// List lists all EphemeralJobs in the indexer.
func (s *ephemeralJobLister) List(selector labels.Selector) (ret []*v1alpha1.EphemeralJob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EphemeralJob))
	})
	return ret, err
}

// EphemeralJobs returns an object that can list and get EphemeralJobs.
func (s *ephemeralJobLister) EphemeralJobs(namespace string) EphemeralJobNamespaceLister {
	return ephemeralJobNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EphemeralJobNamespaceLister helps list and get EphemeralJobs.
// All objects returned here must be treated as read-only.
type EphemeralJobNamespaceLister interface {
	// List lists all EphemeralJobs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EphemeralJob, err error)
	// Get retrieves the EphemeralJob from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EphemeralJob, error)
	EphemeralJobNamespaceListerExpansion
}

// ephemeralJobNamespaceLister implements the EphemeralJobNamespaceLister
// interface.
type ephemeralJobNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EphemeralJobs in the indexer for a given namespace.
func (s ephemeralJobNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EphemeralJob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EphemeralJob))
	})
	return ret, err
}

// Get retrieves the EphemeralJob from the indexer for a given namespace and name.
func (s ephemeralJobNamespaceLister) Get(name string) (*v1alpha1.EphemeralJob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ephemeraljob"), name)
	}
	return obj.(*v1alpha1.EphemeralJob), nil
}
