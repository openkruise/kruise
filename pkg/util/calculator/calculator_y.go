// Code generated by goyacc -o calculator_y.go -p yy calculator.y. DO NOT EDIT.

//line calculator.y:2
package calculator

import __yyfmt__ "fmt"

//line calculator.y:2

import (
	"fmt"
	"strconv"
	"strings"

	"k8s.io/apimachinery/pkg/api/resource"
)

// parseNumber parses numbers, supports percentages
func (c *Calculator) parseNumber(s string) (float64, error) {
	if strings.HasSuffix(s, "%") {
		numStr := strings.TrimSuffix(s, "%")
		num, err := strconv.ParseFloat(numStr, 64)
		if err != nil {
			return 0, err
		}
		return num / 100, nil
	}
	return strconv.ParseFloat(s, 64)
}

// parseQuantity parses a Kubernetes quantity string
func (c *Calculator) parseQuantity(s string) (resource.Quantity, error) {
	return resource.ParseQuantity(s)
}

// toQuantity converts a Value to a Quantity
func (c *Calculator) toQuantity(v *Value) *resource.Quantity {
	if v.IsQuantity {
		q := v.Quantity.DeepCopy()
		return &q
	}
	// Convert number to Quantity
	return resource.NewQuantity(int64(v.Number), resource.DecimalSI)
}

// add performs addition operation
func (c *Calculator) add(left, right *Value) *Value {
	if left == nil || right == nil {
		return nil
	}
	if left.IsQuantity || right.IsQuantity {
		// At least one is Quantity, convert both to Quantity for operation
		leftQ := c.toQuantity(left)
		rightQ := c.toQuantity(right)
		result := leftQ.DeepCopy()
		result.Add(*rightQ)
		return &Value{IsQuantity: true, Quantity: result}
	}
	// Both are numbers
	return &Value{IsQuantity: false, Number: left.Number + right.Number}
}

// sub performs subtraction operation
func (c *Calculator) sub(left, right *Value) *Value {
	if left == nil || right == nil {
		return nil
	}
	if left.IsQuantity || right.IsQuantity {
		// At least one is Quantity, convert both to Quantity for operation
		leftQ := c.toQuantity(left)
		rightQ := c.toQuantity(right)
		result := leftQ.DeepCopy()
		negRightQ := rightQ.DeepCopy()
		negRightQ.Neg()
		result.Add(negRightQ)
		return &Value{IsQuantity: true, Quantity: result}
	}
	// Both are numbers
	return &Value{IsQuantity: false, Number: left.Number - right.Number}
}

// mul performs multiplication operation
func (c *Calculator) mul(left, right *Value) *Value {
	if left == nil || right == nil {
		return nil
	}
	if left.IsQuantity && right.IsQuantity {
		// Both are Quantity, invalid
		c.lastError = fmt.Errorf("multiplication of two quantities")
		return nil
	}
	if left.IsQuantity {
		// left is Quantity, right is number
		result := left.Quantity.DeepCopy()
		result.SetMilli(int64(float64(left.Quantity.MilliValue()) * right.Number))
		return &Value{IsQuantity: true, Quantity: result}
	}
	if right.IsQuantity {
		// right is Quantity, left is number
		result := right.Quantity.DeepCopy()
		result.SetMilli(int64(float64(right.Quantity.MilliValue()) * left.Number))
		return &Value{IsQuantity: true, Quantity: result}
	}
	// Both are numbers
	return &Value{IsQuantity: false, Number: left.Number * right.Number}
}

// div performs division operation
func (c *Calculator) div(left, right *Value) *Value {
	if left == nil || right == nil {
		return nil
	}
	if right.IsQuantity {
		// right is Quantity, invalid
		c.lastError = fmt.Errorf("division by quantity")
		return nil
	}
	if left.IsQuantity {
		// left is Quantity, right is number
		if right.Number == 0 {
			c.lastError = fmt.Errorf("division by zero")
			return nil
		}
		result := left.Quantity.DeepCopy()
		result.SetMilli(int64(float64(left.Quantity.MilliValue()) / right.Number))
		return &Value{IsQuantity: true, Quantity: result}
	}
	// Both are numbers
	if right.Number == 0 {
		c.lastError = fmt.Errorf("division by zero")
		return nil
	}
	return &Value{IsQuantity: false, Number: left.Number / right.Number}
}

// callFunc calls a function
func (c *Calculator) callFunc(name string, args []*Value) *Value {
	if len(args) == 0 {
		c.lastError = fmt.Errorf("function %s requires arguments", name)
		return nil
	}
	switch strings.ToLower(name) {
	case "max":
		return c.maxFunc(args)
	case "min":
		return c.minFunc(args)
	default:
		c.lastError = fmt.Errorf("unknown function: %s", name)
		return nil
	}
}

// maxFunc implements max function
func (c *Calculator) maxFunc(args []*Value) *Value {
	if len(args) != 2 {
		c.lastError = fmt.Errorf("max function requires exactly 2 arguments, got %d", len(args))
		return nil
	}

	left, right := args[0], args[1]
	if left == nil || right == nil {
		return nil
	}

	if left.IsQuantity && right.IsQuantity {
		// Both are Quantity
		cmp := left.Quantity.Cmp(right.Quantity)
		if cmp >= 0 {
			return &Value{IsQuantity: true, Quantity: left.Quantity}
		}
		return &Value{IsQuantity: true, Quantity: right.Quantity}
	}

	if left.IsQuantity {
		// Left is Quantity, right is number
		leftQ := left.Quantity.DeepCopy()
		rightQ := resource.NewQuantity(int64(right.Number), resource.DecimalSI)
		cmp := leftQ.Cmp(*rightQ)
		if cmp >= 0 {
			return &Value{IsQuantity: true, Quantity: left.Quantity}
		}
		return &Value{IsQuantity: true, Quantity: *rightQ}
	}

	if right.IsQuantity {
		// Right is Quantity, left is number
		leftQ := resource.NewQuantity(int64(left.Number), resource.DecimalSI)
		rightQ := right.Quantity.DeepCopy()
		cmp := leftQ.Cmp(rightQ)
		if cmp >= 0 {
			return &Value{IsQuantity: true, Quantity: *leftQ}
		}
		return &Value{IsQuantity: true, Quantity: rightQ}
	}

	// Both are numbers
	if left.Number >= right.Number {
		return &Value{IsQuantity: false, Number: left.Number}
	}
	return &Value{IsQuantity: false, Number: right.Number}
}

// minFunc implements min function
func (c *Calculator) minFunc(args []*Value) *Value {
	if len(args) != 2 {
		c.lastError = fmt.Errorf("min function requires exactly 2 arguments, got %d", len(args))
		return nil
	}

	left, right := args[0], args[1]
	if left == nil || right == nil {
		return nil
	}

	if left.IsQuantity && right.IsQuantity {
		// Both are Quantity
		cmp := left.Quantity.Cmp(right.Quantity)
		if cmp <= 0 {
			return &Value{IsQuantity: true, Quantity: left.Quantity}
		}
		return &Value{IsQuantity: true, Quantity: right.Quantity}
	}

	if left.IsQuantity {
		// Left is Quantity, right is number
		rightQ := resource.NewQuantity(int64(right.Number), resource.DecimalSI)
		cmp := left.Quantity.Cmp(*rightQ)
		if cmp <= 0 {
			return &Value{IsQuantity: true, Quantity: left.Quantity}
		}
		return &Value{IsQuantity: true, Quantity: *rightQ}
	}

	if right.IsQuantity {
		// Right is Quantity, left is number
		leftQ := resource.NewQuantity(int64(left.Number), resource.DecimalSI)
		cmp := leftQ.Cmp(right.Quantity)
		if cmp <= 0 {
			return &Value{IsQuantity: true, Quantity: *leftQ}
		}
		return &Value{IsQuantity: true, Quantity: right.Quantity}
	}

	// Both are numbers
	if left.Number <= right.Number {
		return &Value{IsQuantity: false, Number: left.Number}
	}
	return &Value{IsQuantity: false, Number: right.Number}
}

// getVariable gets a variable value
func (c *Calculator) getVariable(name string) (*Value, bool) {
	val, exists := c.variables[strings.ToLower(name)]
	if !exists {
		c.lastError = fmt.Errorf("undefined variable: %s", name)
	}
	return val, exists
}

//line calculator.y:256
type yySymType struct {
	yys int
	val *Value
	str string
	num float64
}

const NUMBER = 57346
const QUANTITY = 57347
const IDENT = 57348
const UMINUS = 57349

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"NUMBER",
	"QUANTITY",
	"IDENT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"UMINUS",
	"'('",
	"')'",
	"','",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line calculator.y:368

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 37

var yyAct = [...]int8{
	2, 11, 12, 15, 11, 12, 1, 24, 25, 16,
	27, 4, 18, 19, 3, 9, 22, 5, 6, 7,
	0, 10, 17, 13, 14, 8, 26, 0, 20, 21,
	11, 12, 11, 12, 0, 0, 23,
}

var yyPact = [...]int16{
	13, -1000, 25, 14, -1000, -1000, -1000, -9, 13, -1000,
	13, 13, 13, 13, 13, 13, 23, -1000, -1000, -1000,
	-1000, -1000, -6, -1000, -1000, 13, -3, -1000,
}

var yyPgo = [...]int8{
	0, 0, 14, 11, 15, 6,
}

var yyR1 = [...]int8{
	0, 5, 1, 1, 1, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 4, 4,
}

var yyR2 = [...]int8{
	0, 1, 3, 3, 1, 3, 3, 1, 1, 1,
	1, 3, 1, 2, 4, 6,
}

var yyChk = [...]int16{
	-1000, -5, -1, -2, -3, 4, 5, 6, 12, -4,
	8, 7, 8, 9, 10, 12, -1, -3, -1, -1,
	-2, -2, -1, 13, 13, 14, -1, 13,
}

var yyDef = [...]int8{
	0, -2, 1, 4, 7, 8, 9, 10, 0, 12,
	0, 0, 0, 0, 0, 0, 0, 13, 2, 3,
	5, 6, 0, 11, 14, 0, 0, 15,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	12, 13, 9, 7, 14, 8, 3, 10,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 11,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line calculator.y:271
		{
			currentCalc.result = yyDollar[1].val
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line calculator.y:277
		{
			yyVAL.val = currentCalc.add(yyDollar[1].val, yyDollar[3].val)
			if yyVAL.val == nil && currentCalc.lastError == nil {
				currentCalc.lastError = fmt.Errorf("invalid addition operation")
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line calculator.y:283
		{
			yyVAL.val = currentCalc.sub(yyDollar[1].val, yyDollar[3].val)
			if yyVAL.val == nil && currentCalc.lastError == nil {
				currentCalc.lastError = fmt.Errorf("invalid subtraction operation")
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line calculator.y:289
		{
			yyVAL.val = yyDollar[1].val
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line calculator.y:295
		{
			yyVAL.val = currentCalc.mul(yyDollar[1].val, yyDollar[3].val)
			if yyVAL.val == nil && currentCalc.lastError == nil {
				currentCalc.lastError = fmt.Errorf("invalid multiplication operation")
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line calculator.y:301
		{
			yyVAL.val = currentCalc.div(yyDollar[1].val, yyDollar[3].val)
			if yyVAL.val == nil && currentCalc.lastError == nil {
				currentCalc.lastError = fmt.Errorf("invalid division operation")
			}
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line calculator.y:307
		{
			yyVAL.val = yyDollar[1].val
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line calculator.y:313
		{
			num, _ := currentCalc.parseNumber(yyDollar[1].str)
			yyVAL.val = &Value{IsQuantity: false, Number: num}
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line calculator.y:317
		{
			q, err := currentCalc.parseQuantity(yyDollar[1].str)
			if err != nil {
				currentCalc.lastError = err
				yyVAL.val = nil
			} else {
				yyVAL.val = &Value{IsQuantity: true, Quantity: q}
			}
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line calculator.y:326
		{
			// Handle variable reference
			varName := strings.ToLower(yyDollar[1].str)
			if val, exists := currentCalc.getVariable(varName); exists {
				yyVAL.val = val
			} else {
				yyVAL.val = nil
			}
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line calculator.y:335
		{
			yyVAL.val = yyDollar[2].val
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line calculator.y:338
		{
			yyVAL.val = yyDollar[1].val
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line calculator.y:341
		{
			if yyDollar[2].val == nil {
				yyVAL.val = nil
			} else if yyDollar[2].val.IsQuantity {
				negQ := resource.NewQuantity(-yyDollar[2].val.Quantity.Value(), resource.DecimalSI)
				yyVAL.val = &Value{IsQuantity: true, Quantity: *negQ}
			} else {
				yyVAL.val = &Value{IsQuantity: false, Number: -yyDollar[2].val.Number}
			}
		}
	case 14:
		yyDollar = yyS[yypt-4 : yypt+1]
//line calculator.y:354
		{
			yyVAL.val = currentCalc.callFunc(yyDollar[1].str, []*Value{yyDollar[3].val})
			if yyVAL.val == nil && currentCalc.lastError == nil {
				currentCalc.lastError = fmt.Errorf("function call failed")
			}
		}
	case 15:
		yyDollar = yyS[yypt-6 : yypt+1]
//line calculator.y:360
		{
			yyVAL.val = currentCalc.callFunc(yyDollar[1].str, []*Value{yyDollar[3].val, yyDollar[5].val})
			if yyVAL.val == nil && currentCalc.lastError == nil {
				currentCalc.lastError = fmt.Errorf("function call failed")
			}
		}
	}
	goto yystack /* stack new state and value */
}
