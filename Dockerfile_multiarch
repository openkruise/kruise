# Build the manager and daemon binaries
FROM --platform=$BUILDPLATFORM golang:1.22.11-alpine3.21@sha256:161858498a61ce093c8e2bd704299bfb23e5bff79aef99b6c40bb9c6a43acf0f AS builder

WORKDIR /workspace
# Copy the Go Modules manifests
COPY go.mod go.mod
COPY go.sum go.sum

# Copy the go source
COPY main.go main.go
COPY apis/ apis/
COPY cmd/ cmd/
COPY pkg/ pkg/

#ENV GOPROXY=https://goproxy.cn,direct
RUN go mod tidy

# Build
ARG TARGETOS
ARG TARGETARCH
RUN GOOS=${TARGETOS} GOARCH=${TARGETARCH} CGO_ENABLED=0 GO111MODULE=on go build -a -o manager main.go \
  && GOOS=${TARGETOS} GOARCH=${TARGETARCH} CGO_ENABLED=0 GO111MODULE=on go build -a -o daemon ./cmd/daemon/main.go

# Create a temporary Alpine image to prepare our filesystem
FROM alpine:3.21@sha256:56fa17d2a7e7f168a043a2712e63aed1f8543aeafdcee47c58dcffe38ed51099 AS fs-prep
WORKDIR /
COPY --from=builder /workspace/manager .
COPY --from=builder /workspace/daemon ./kruise-daemon

# Create necessary directories and set permissions
RUN mkdir -p /log /tmp && \
    chown -R 65534:65534 /log && \
    chown -R 65534:65534 /tmp && \
    chown -R 65534:65534 /manager && \
    chown -R 65534:65534 /kruise-daemon

# Use distroless as minimal base image for the final image
FROM gcr.io/distroless/static:nonroot

# Copy prepared files from the fs-prep stage
COPY --from=fs-prep --chown=65534:65534 /manager /manager
COPY --from=fs-prep --chown=65534:65534 /kruise-daemon /kruise-daemon
COPY --from=fs-prep --chown=65534:65534 /log /log
COPY --from=fs-prep --chown=65534:65534 /tmp /tmp

USER 65534:65534

ENTRYPOINT ["/manager"]
